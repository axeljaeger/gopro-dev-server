/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
/**
 * Metadata for a photo media file
 * 
 * Note that each property actually comes as a string but is specified here using its functional value.
 * 
 * @export
 * @interface PhotoMetadata
 */
export interface PhotoMetadata {
    /**
     * Creation time in seconds since epoch
     * @type {number}
     * @memberof PhotoMetadata
     */
    cre: number;
    /**
     * Media content type
     * 
     * | ID | Mode |
     * | -- | ---- |
     * | Video | 0 |
     * | Looping | 1 |
     * | Chaptered Video | 2 |
     * | Time Lapse | 3 |
     * | Single Photo | 4 |
     * | Burst Photo | 5 |
     * | Time Lapse Photo | 6 |
     * | Night Lapse Photo | 8 |
     * | Night Photo | 9 |
     * | Continuous Photo | 10 |
     * | Raw Photo | 11 |
     * | Live Burst | 12 |
     * 
     * @type {number}
     * @memberof PhotoMetadata
     */
    ct: PhotoMetadataCtEnum;
    /**
     * 1 if stabilized, 0 otherwise
     * @type {number}
     * @memberof PhotoMetadata
     */
    eis: PhotoMetadataEisEnum;
    /**
     * Field of View
     * @type {string}
     * @memberof PhotoMetadata
     */
    fov?: string;
    /**
     * Globally Unique Media ID
     * @type {string}
     * @memberof PhotoMetadata
     */
    gumi: string;
    /**
     * Height of media in pixels
     * @type {number}
     * @memberof PhotoMetadata
     */
    h: number;
    /**
     * Number of hilights in media
     * @type {number}
     * @memberof PhotoMetadata
     */
    hc: number;
    /**
     * 1 if photo taken with high dynamic range, 0 otherwise
     * @type {number}
     * @memberof PhotoMetadata
     */
    hdr?: PhotoMetadataHdrEnum;
    /**
     * Lens configuration ==> 0 for front, 1 for rear
     * @type {number}
     * @memberof PhotoMetadata
     */
    lc?: PhotoMetadataLcEnum;
    /**
     * List of offload states
     * @type {Array<string>}
     * @memberof PhotoMetadata
     */
    mos?: Array<PhotoMetadataMosEnum>;
    /**
     * 1 if metadata is present, 0 otherwise
     * @type {number}
     * @memberof PhotoMetadata
     */
    mp: PhotoMetadataMpEnum;
    /**
     * Lens projection
     * 
     * | ID | Mode |
     * | -- | ---- |
     * | EAC | 0 |
     * | ERP | 1 |
     * | EAC, split horizontally in the middle for 2 output | 2 |
     * | ERP, cropped for panorama | 3 |
     * | Bypass stitch algorithm, side by side circles | 4 |
     * | Stitch is disabled, stitch algorithm is enabled for offline stitch | 5 |
     * | Stitch is disabled| 6 |
     *  | Bypass stitch algorithm for EAC split | 7 |
     * | Hemisheric | 8 |
     * 
     * @type {number}
     * @memberof PhotoMetadata
     */
    prjn?: PhotoMetadataPrjnEnum;
    /**
     * 1 if photo has raw version, 0 otherwise
     * @type {number}
     * @memberof PhotoMetadata
     */
    raw?: PhotoMetadataRawEnum;
    /**
     * Deprecated
     * @type {string}
     * @memberof PhotoMetadata
     */
    rot: string;
    /**
     * File size in bytes
     * @type {number}
     * @memberof PhotoMetadata
     */
    s: number;
    /**
     * 1 if file is transcoded, 0 otherwise
     * @type {number}
     * @memberof PhotoMetadata
     */
    tr: PhotoMetadataTrEnum;
    /**
     * Has the file been uploaded? 0 if no, 1 if yes
     * @type {number}
     * @memberof PhotoMetadata
     */
    us: PhotoMetadataUsEnum;
    /**
     * Width of media in pixels
     * @type {number}
     * @memberof PhotoMetadata
     */
    w: number;
    /**
     * 1 if photo taken with wide dynamic range, 0 otherwise
     * @type {number}
     * @memberof PhotoMetadata
     */
    wdr?: PhotoMetadataWdrEnum;
}


/**
 * @export
 */
export const PhotoMetadataCtEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12
} as const;
export type PhotoMetadataCtEnum = typeof PhotoMetadataCtEnum[keyof typeof PhotoMetadataCtEnum];

/**
 * @export
 */
export const PhotoMetadataEisEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type PhotoMetadataEisEnum = typeof PhotoMetadataEisEnum[keyof typeof PhotoMetadataEisEnum];

/**
 * @export
 */
export const PhotoMetadataHdrEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type PhotoMetadataHdrEnum = typeof PhotoMetadataHdrEnum[keyof typeof PhotoMetadataHdrEnum];

/**
 * @export
 */
export const PhotoMetadataLcEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type PhotoMetadataLcEnum = typeof PhotoMetadataLcEnum[keyof typeof PhotoMetadataLcEnum];

/**
 * @export
 */
export const PhotoMetadataMosEnum = {
    App: 'app',
    Pc: 'pc',
    Other: 'other'
} as const;
export type PhotoMetadataMosEnum = typeof PhotoMetadataMosEnum[keyof typeof PhotoMetadataMosEnum];

/**
 * @export
 */
export const PhotoMetadataMpEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type PhotoMetadataMpEnum = typeof PhotoMetadataMpEnum[keyof typeof PhotoMetadataMpEnum];

/**
 * @export
 */
export const PhotoMetadataPrjnEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8
} as const;
export type PhotoMetadataPrjnEnum = typeof PhotoMetadataPrjnEnum[keyof typeof PhotoMetadataPrjnEnum];

/**
 * @export
 */
export const PhotoMetadataRawEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type PhotoMetadataRawEnum = typeof PhotoMetadataRawEnum[keyof typeof PhotoMetadataRawEnum];

/**
 * @export
 */
export const PhotoMetadataTrEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type PhotoMetadataTrEnum = typeof PhotoMetadataTrEnum[keyof typeof PhotoMetadataTrEnum];

/**
 * @export
 */
export const PhotoMetadataUsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type PhotoMetadataUsEnum = typeof PhotoMetadataUsEnum[keyof typeof PhotoMetadataUsEnum];

/**
 * @export
 */
export const PhotoMetadataWdrEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type PhotoMetadataWdrEnum = typeof PhotoMetadataWdrEnum[keyof typeof PhotoMetadataWdrEnum];


/**
 * Check if a given object implements the PhotoMetadata interface.
 */
export function instanceOfPhotoMetadata(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cre" in value;
    isInstance = isInstance && "ct" in value;
    isInstance = isInstance && "eis" in value;
    isInstance = isInstance && "gumi" in value;
    isInstance = isInstance && "h" in value;
    isInstance = isInstance && "hc" in value;
    isInstance = isInstance && "mp" in value;
    isInstance = isInstance && "rot" in value;
    isInstance = isInstance && "s" in value;
    isInstance = isInstance && "tr" in value;
    isInstance = isInstance && "us" in value;
    isInstance = isInstance && "w" in value;

    return isInstance;
}

export function PhotoMetadataFromJSON(json: any): PhotoMetadata {
    return PhotoMetadataFromJSONTyped(json, false);
}

export function PhotoMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): PhotoMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cre': json['cre'],
        'ct': json['ct'],
        'eis': json['eis'],
        'fov': !exists(json, 'fov') ? undefined : json['fov'],
        'gumi': json['gumi'],
        'h': json['h'],
        'hc': json['hc'],
        'hdr': !exists(json, 'hdr') ? undefined : json['hdr'],
        'lc': !exists(json, 'lc') ? undefined : json['lc'],
        'mos': !exists(json, 'mos') ? undefined : json['mos'],
        'mp': json['mp'],
        'prjn': !exists(json, 'prjn') ? undefined : json['prjn'],
        'raw': !exists(json, 'raw') ? undefined : json['raw'],
        'rot': json['rot'],
        's': json['s'],
        'tr': json['tr'],
        'us': json['us'],
        'w': json['w'],
        'wdr': !exists(json, 'wdr') ? undefined : json['wdr'],
    };
}

export function PhotoMetadataToJSON(value?: PhotoMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cre': value.cre,
        'ct': value.ct,
        'eis': value.eis,
        'fov': value.fov,
        'gumi': value.gumi,
        'h': value.h,
        'hc': value.hc,
        'hdr': value.hdr,
        'lc': value.lc,
        'mos': value.mos,
        'mp': value.mp,
        'prjn': value.prjn,
        'raw': value.raw,
        'rot': value.rot,
        's': value.s,
        'tr': value.tr,
        'us': value.us,
        'w': value.w,
        'wdr': value.wdr,
    };
}

