/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
/**
 * Metadata for a video media file
 * 
 * Note that each property actually comes as a string but is specified here using its functional value.
 * 
 * @export
 * @interface VideoMetadata
 */
export interface VideoMetadata {
    /**
     * Audio option
     * @type {string}
     * @memberof VideoMetadata
     */
    ao: VideoMetadataAoEnum;
    /**
     * Advanced Video Code Profile
     * @type {number}
     * @memberof VideoMetadata
     */
    avcProfile: number;
    /**
     * 1 if clipped, 0 otherwise
     * @type {number}
     * @memberof VideoMetadata
     */
    cl: VideoMetadataClEnum;
    /**
     * Creation time in seconds since epoch
     * @type {number}
     * @memberof VideoMetadata
     */
    cre: number;
    /**
     * Media content type
     * 
     * | ID | Mode |
     * | -- | ---- |
     * | Video | 0 |
     * | Looping | 1 |
     * | Chaptered Video | 2 |
     * | Time Lapse | 3 |
     * | Single Photo | 4 |
     * | Burst Photo | 5 |
     * | Time Lapse Photo | 6 |
     * | Night Lapse Photo | 8 |
     * | Night Photo | 9 |
     * | Continuous Photo | 10 |
     * | Raw Photo | 11 |
     * | Live Burst | 12 |
     * 
     * @type {number}
     * @memberof VideoMetadata
     */
    ct: VideoMetadataCtEnum;
    /**
     * Video duration in seconds
     * @type {number}
     * @memberof VideoMetadata
     */
    dur: number;
    /**
     * 1 if stabilized, 0 otherwise
     * @type {number}
     * @memberof VideoMetadata
     */
    eis: VideoMetadataEisEnum;
    /**
     * Field of View
     * @type {string}
     * @memberof VideoMetadata
     */
    fov?: string;
    /**
     * Video frame rate numerator
     * @type {number}
     * @memberof VideoMetadata
     */
    fps: number;
    /**
     * Video frame rate denominator
     * @type {number}
     * @memberof VideoMetadata
     */
    fpsDenom: number;
    /**
     * Globally Unique Media ID
     * @type {string}
     * @memberof VideoMetadata
     */
    gumi: string;
    /**
     * Height of media in pixels
     * @type {number}
     * @memberof VideoMetadata
     */
    h: number;
    /**
     * Number of hilights in media
     * @type {number}
     * @memberof VideoMetadata
     */
    hc: number;
    /**
     * List of hilights in ms offset from start of video
     * @type {Array<number>}
     * @memberof VideoMetadata
     */
    hi?: Array<number>;
    /**
     * Lens configuration ==> 0 for front, 1 for rear
     * @type {number}
     * @memberof VideoMetadata
     */
    lc?: VideoMetadataLcEnum;
    /**
     * Low Resolution Video file size in bytes. -1 if there is no LRV file
     * @type {number}
     * @memberof VideoMetadata
     */
    ls: number;
    /**
     * List of offload states
     * @type {Array<string>}
     * @memberof VideoMetadata
     */
    mos?: Array<VideoMetadataMosEnum>;
    /**
     * 1 if metadata is present, 0 otherwise
     * @type {number}
     * @memberof VideoMetadata
     */
    mp: VideoMetadataMpEnum;
    /**
     * Lens projection
     * 
     * | ID | Mode |
     * | -- | ---- |
     * | EAC | 0 |
     * | ERP | 1 |
     * | EAC, split horizontally in the middle for 2 output | 2 |
     * | ERP, cropped for panorama | 3 |
     * | Bypass stitch algorithm, side by side circles | 4 |
     * | Stitch is disabled, stitch algorithm is enabled for offline stitch | 5 |
     * | Stitch is disabled| 6 |
     *  | Bypass stitch algorithm for EAC split | 7 |
     * | Hemisheric | 8 |
     * 
     * @type {number}
     * @memberof VideoMetadata
     */
    prjn?: VideoMetadataPrjnEnum;
    /**
     * Advanced Video Codec Level
     * @type {number}
     * @memberof VideoMetadata
     */
    profile: number;
    /**
     * Is video progressive? 1 if progressive, 0 if interlaced
     * @type {number}
     * @memberof VideoMetadata
     */
    progr?: VideoMetadataProgrEnum;
    /**
     * 1 if protune audio is present, 0 otherwise
     * @type {number}
     * @memberof VideoMetadata
     */
    pta: VideoMetadataPtaEnum;
    /**
     * Deprecated
     * @type {string}
     * @memberof VideoMetadata
     */
    rot: string;
    /**
     * File size in bytes
     * @type {number}
     * @memberof VideoMetadata
     */
    s: number;
    /**
     * 1 if subsampled from other video, 0 otherwise
     * @type {number}
     * @memberof VideoMetadata
     */
    subsample: VideoMetadataSubsampleEnum;
    /**
     * 1 if file is transcoded, 0 otherwise
     * @type {number}
     * @memberof VideoMetadata
     */
    tr: VideoMetadataTrEnum;
    /**
     * Has the file been uploaded? 0 if no, 1 if yes
     * @type {number}
     * @memberof VideoMetadata
     */
    us: VideoMetadataUsEnum;
    /**
     * Width of media in pixels
     * @type {number}
     * @memberof VideoMetadata
     */
    w: number;
}


/**
 * @export
 */
export const VideoMetadataAoEnum = {
    Auto: 'auto',
    Wind: 'wind',
    Stereo: 'stereo',
    False: 'false'
} as const;
export type VideoMetadataAoEnum = typeof VideoMetadataAoEnum[keyof typeof VideoMetadataAoEnum];

/**
 * @export
 */
export const VideoMetadataClEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type VideoMetadataClEnum = typeof VideoMetadataClEnum[keyof typeof VideoMetadataClEnum];

/**
 * @export
 */
export const VideoMetadataCtEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12
} as const;
export type VideoMetadataCtEnum = typeof VideoMetadataCtEnum[keyof typeof VideoMetadataCtEnum];

/**
 * @export
 */
export const VideoMetadataEisEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type VideoMetadataEisEnum = typeof VideoMetadataEisEnum[keyof typeof VideoMetadataEisEnum];

/**
 * @export
 */
export const VideoMetadataLcEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type VideoMetadataLcEnum = typeof VideoMetadataLcEnum[keyof typeof VideoMetadataLcEnum];

/**
 * @export
 */
export const VideoMetadataMosEnum = {
    App: 'app',
    Pc: 'pc',
    Other: 'other'
} as const;
export type VideoMetadataMosEnum = typeof VideoMetadataMosEnum[keyof typeof VideoMetadataMosEnum];

/**
 * @export
 */
export const VideoMetadataMpEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type VideoMetadataMpEnum = typeof VideoMetadataMpEnum[keyof typeof VideoMetadataMpEnum];

/**
 * @export
 */
export const VideoMetadataPrjnEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8
} as const;
export type VideoMetadataPrjnEnum = typeof VideoMetadataPrjnEnum[keyof typeof VideoMetadataPrjnEnum];

/**
 * @export
 */
export const VideoMetadataProgrEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type VideoMetadataProgrEnum = typeof VideoMetadataProgrEnum[keyof typeof VideoMetadataProgrEnum];

/**
 * @export
 */
export const VideoMetadataPtaEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type VideoMetadataPtaEnum = typeof VideoMetadataPtaEnum[keyof typeof VideoMetadataPtaEnum];

/**
 * @export
 */
export const VideoMetadataSubsampleEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type VideoMetadataSubsampleEnum = typeof VideoMetadataSubsampleEnum[keyof typeof VideoMetadataSubsampleEnum];

/**
 * @export
 */
export const VideoMetadataTrEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type VideoMetadataTrEnum = typeof VideoMetadataTrEnum[keyof typeof VideoMetadataTrEnum];

/**
 * @export
 */
export const VideoMetadataUsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type VideoMetadataUsEnum = typeof VideoMetadataUsEnum[keyof typeof VideoMetadataUsEnum];


/**
 * Check if a given object implements the VideoMetadata interface.
 */
export function instanceOfVideoMetadata(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ao" in value;
    isInstance = isInstance && "avcProfile" in value;
    isInstance = isInstance && "cl" in value;
    isInstance = isInstance && "cre" in value;
    isInstance = isInstance && "ct" in value;
    isInstance = isInstance && "dur" in value;
    isInstance = isInstance && "eis" in value;
    isInstance = isInstance && "fps" in value;
    isInstance = isInstance && "fpsDenom" in value;
    isInstance = isInstance && "gumi" in value;
    isInstance = isInstance && "h" in value;
    isInstance = isInstance && "hc" in value;
    isInstance = isInstance && "ls" in value;
    isInstance = isInstance && "mp" in value;
    isInstance = isInstance && "profile" in value;
    isInstance = isInstance && "pta" in value;
    isInstance = isInstance && "rot" in value;
    isInstance = isInstance && "s" in value;
    isInstance = isInstance && "subsample" in value;
    isInstance = isInstance && "tr" in value;
    isInstance = isInstance && "us" in value;
    isInstance = isInstance && "w" in value;

    return isInstance;
}

export function VideoMetadataFromJSON(json: any): VideoMetadata {
    return VideoMetadataFromJSONTyped(json, false);
}

export function VideoMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): VideoMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ao': json['ao'],
        'avcProfile': json['avc_profile'],
        'cl': json['cl'],
        'cre': json['cre'],
        'ct': json['ct'],
        'dur': json['dur'],
        'eis': json['eis'],
        'fov': !exists(json, 'fov') ? undefined : json['fov'],
        'fps': json['fps'],
        'fpsDenom': json['fps_denom'],
        'gumi': json['gumi'],
        'h': json['h'],
        'hc': json['hc'],
        'hi': !exists(json, 'hi') ? undefined : json['hi'],
        'lc': !exists(json, 'lc') ? undefined : json['lc'],
        'ls': json['ls'],
        'mos': !exists(json, 'mos') ? undefined : json['mos'],
        'mp': json['mp'],
        'prjn': !exists(json, 'prjn') ? undefined : json['prjn'],
        'profile': json['profile'],
        'progr': !exists(json, 'progr') ? undefined : json['progr'],
        'pta': json['pta'],
        'rot': json['rot'],
        's': json['s'],
        'subsample': json['subsample'],
        'tr': json['tr'],
        'us': json['us'],
        'w': json['w'],
    };
}

export function VideoMetadataToJSON(value?: VideoMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ao': value.ao,
        'avc_profile': value.avcProfile,
        'cl': value.cl,
        'cre': value.cre,
        'ct': value.ct,
        'dur': value.dur,
        'eis': value.eis,
        'fov': value.fov,
        'fps': value.fps,
        'fps_denom': value.fpsDenom,
        'gumi': value.gumi,
        'h': value.h,
        'hc': value.hc,
        'hi': value.hi,
        'lc': value.lc,
        'ls': value.ls,
        'mos': value.mos,
        'mp': value.mp,
        'prjn': value.prjn,
        'profile': value.profile,
        'progr': value.progr,
        'pta': value.pta,
        'rot': value.rot,
        's': value.s,
        'subsample': value.subsample,
        'tr': value.tr,
        'us': value.us,
        'w': value.w,
    };
}

