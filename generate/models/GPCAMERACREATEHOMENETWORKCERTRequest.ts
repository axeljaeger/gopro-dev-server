/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface GPCAMERACREATEHOMENETWORKCERTRequest
 */
export interface GPCAMERACREATEHOMENETWORKCERTRequest {
    /**
     * If 1, replace existing Root CA cert with a newly-generated one.
     * @type {number}
     * @memberof GPCAMERACREATEHOMENETWORKCERTRequest
     */
    override?: GPCAMERACREATEHOMENETWORKCERTRequestOverrideEnum;
}


/**
 * @export
 */
export const GPCAMERACREATEHOMENETWORKCERTRequestOverrideEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type GPCAMERACREATEHOMENETWORKCERTRequestOverrideEnum = typeof GPCAMERACREATEHOMENETWORKCERTRequestOverrideEnum[keyof typeof GPCAMERACREATEHOMENETWORKCERTRequestOverrideEnum];


/**
 * Check if a given object implements the GPCAMERACREATEHOMENETWORKCERTRequest interface.
 */
export function instanceOfGPCAMERACREATEHOMENETWORKCERTRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GPCAMERACREATEHOMENETWORKCERTRequestFromJSON(json: any): GPCAMERACREATEHOMENETWORKCERTRequest {
    return GPCAMERACREATEHOMENETWORKCERTRequestFromJSONTyped(json, false);
}

export function GPCAMERACREATEHOMENETWORKCERTRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GPCAMERACREATEHOMENETWORKCERTRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'override': !exists(json, 'override') ? undefined : json['override'],
    };
}

export function GPCAMERACREATEHOMENETWORKCERTRequestToJSON(value?: GPCAMERACREATEHOMENETWORKCERTRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'override': value.override,
    };
}

