/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { PhotoMetadata } from './PhotoMetadata.js';
import {
    PhotoMetadataFromJSON,
    PhotoMetadataFromJSONTyped,
    PhotoMetadataToJSON,
} from './PhotoMetadata.js';
import type { VideoMetadata } from './VideoMetadata.js';
import {
    VideoMetadataFromJSON,
    VideoMetadataFromJSONTyped,
    VideoMetadataToJSON,
} from './VideoMetadata.js';

/**
 * 
 * @export
 * @interface OGPMEDIAINFO200Response
 */
export interface OGPMEDIAINFO200Response {
    /**
     * Audio option
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    ao: OGPMEDIAINFO200ResponseAoEnum | null;
    /**
     * Advanced Video Code Profile
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    avcProfile: any | null;
    /**
     * 1 if clipped, 0 otherwise
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    cl: OGPMEDIAINFO200ResponseClEnum | null;
    /**
     * Creation time in seconds since epoch
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    cre: any | null;
    /**
     * Media content type
     * 
     * | ID | Mode |
     * | -- | ---- |
     * | Video | 0 |
     * | Looping | 1 |
     * | Chaptered Video | 2 |
     * | Time Lapse | 3 |
     * | Single Photo | 4 |
     * | Burst Photo | 5 |
     * | Time Lapse Photo | 6 |
     * | Night Lapse Photo | 8 |
     * | Night Photo | 9 |
     * | Continuous Photo | 10 |
     * | Raw Photo | 11 |
     * | Live Burst | 12 |
     * 
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    ct: OGPMEDIAINFO200ResponseCtEnum | null;
    /**
     * Video duration in seconds
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    dur: any | null;
    /**
     * 1 if stabilized, 0 otherwise
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    eis: OGPMEDIAINFO200ResponseEisEnum | null;
    /**
     * Field of View
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    fov?: any | null;
    /**
     * Video frame rate numerator
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    fps: any | null;
    /**
     * Video frame rate denominator
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    fpsDenom: any | null;
    /**
     * Globally Unique Media ID
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    gumi: any | null;
    /**
     * Height of media in pixels
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    h: any | null;
    /**
     * Number of hilights in media
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    hc: any | null;
    /**
     * List of hilights in ms offset from start of video
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    hi?: any | null;
    /**
     * Lens configuration ==> 0 for front, 1 for rear
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    lc?: OGPMEDIAINFO200ResponseLcEnum | null;
    /**
     * Low Resolution Video file size in bytes. -1 if there is no LRV file
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    ls: any | null;
    /**
     * List of offload states
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    mos?: any | null;
    /**
     * 1 if metadata is present, 0 otherwise
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    mp: OGPMEDIAINFO200ResponseMpEnum | null;
    /**
     * Lens projection
     * 
     * | ID | Mode |
     * | -- | ---- |
     * | EAC | 0 |
     * | ERP | 1 |
     * | EAC, split horizontally in the middle for 2 output | 2 |
     * | ERP, cropped for panorama | 3 |
     * | Bypass stitch algorithm, side by side circles | 4 |
     * | Stitch is disabled, stitch algorithm is enabled for offline stitch | 5 |
     * | Stitch is disabled| 6 |
     *  | Bypass stitch algorithm for EAC split | 7 |
     * | Hemisheric | 8 |
     * 
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    prjn?: OGPMEDIAINFO200ResponsePrjnEnum | null;
    /**
     * Advanced Video Codec Level
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    profile: any | null;
    /**
     * Is video progressive? 1 if progressive, 0 if interlaced
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    progr?: OGPMEDIAINFO200ResponseProgrEnum | null;
    /**
     * 1 if protune audio is present, 0 otherwise
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    pta: OGPMEDIAINFO200ResponsePtaEnum | null;
    /**
     * Deprecated
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    rot: any | null;
    /**
     * File size in bytes
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    s: any | null;
    /**
     * 1 if subsampled from other video, 0 otherwise
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    subsample: OGPMEDIAINFO200ResponseSubsampleEnum | null;
    /**
     * 1 if file is transcoded, 0 otherwise
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    tr: OGPMEDIAINFO200ResponseTrEnum | null;
    /**
     * Has the file been uploaded? 0 if no, 1 if yes
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    us: OGPMEDIAINFO200ResponseUsEnum | null;
    /**
     * Width of media in pixels
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    w: any | null;
    /**
     * 1 if photo taken with high dynamic range, 0 otherwise
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    hdr?: OGPMEDIAINFO200ResponseHdrEnum | null;
    /**
     * 1 if photo has raw version, 0 otherwise
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    raw?: OGPMEDIAINFO200ResponseRawEnum | null;
    /**
     * 1 if photo taken with wide dynamic range, 0 otherwise
     * @type {any}
     * @memberof OGPMEDIAINFO200Response
     */
    wdr?: OGPMEDIAINFO200ResponseWdrEnum | null;
}


/**
 * @export
 */
export const OGPMEDIAINFO200ResponseAoEnum = {
    Auto: 'auto',
    Wind: 'wind',
    Stereo: 'stereo',
    False: 'false'
} as const;
export type OGPMEDIAINFO200ResponseAoEnum = typeof OGPMEDIAINFO200ResponseAoEnum[keyof typeof OGPMEDIAINFO200ResponseAoEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseClEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseClEnum = typeof OGPMEDIAINFO200ResponseClEnum[keyof typeof OGPMEDIAINFO200ResponseClEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseCtEnum = {
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12'
} as const;
export type OGPMEDIAINFO200ResponseCtEnum = typeof OGPMEDIAINFO200ResponseCtEnum[keyof typeof OGPMEDIAINFO200ResponseCtEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseEisEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseEisEnum = typeof OGPMEDIAINFO200ResponseEisEnum[keyof typeof OGPMEDIAINFO200ResponseEisEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseLcEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseLcEnum = typeof OGPMEDIAINFO200ResponseLcEnum[keyof typeof OGPMEDIAINFO200ResponseLcEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseMpEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseMpEnum = typeof OGPMEDIAINFO200ResponseMpEnum[keyof typeof OGPMEDIAINFO200ResponseMpEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponsePrjnEnum = {
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8'
} as const;
export type OGPMEDIAINFO200ResponsePrjnEnum = typeof OGPMEDIAINFO200ResponsePrjnEnum[keyof typeof OGPMEDIAINFO200ResponsePrjnEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseProgrEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseProgrEnum = typeof OGPMEDIAINFO200ResponseProgrEnum[keyof typeof OGPMEDIAINFO200ResponseProgrEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponsePtaEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponsePtaEnum = typeof OGPMEDIAINFO200ResponsePtaEnum[keyof typeof OGPMEDIAINFO200ResponsePtaEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseSubsampleEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseSubsampleEnum = typeof OGPMEDIAINFO200ResponseSubsampleEnum[keyof typeof OGPMEDIAINFO200ResponseSubsampleEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseTrEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseTrEnum = typeof OGPMEDIAINFO200ResponseTrEnum[keyof typeof OGPMEDIAINFO200ResponseTrEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseUsEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseUsEnum = typeof OGPMEDIAINFO200ResponseUsEnum[keyof typeof OGPMEDIAINFO200ResponseUsEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseHdrEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseHdrEnum = typeof OGPMEDIAINFO200ResponseHdrEnum[keyof typeof OGPMEDIAINFO200ResponseHdrEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseRawEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseRawEnum = typeof OGPMEDIAINFO200ResponseRawEnum[keyof typeof OGPMEDIAINFO200ResponseRawEnum];

/**
 * @export
 */
export const OGPMEDIAINFO200ResponseWdrEnum = {
    _0: '0',
    _1: '1'
} as const;
export type OGPMEDIAINFO200ResponseWdrEnum = typeof OGPMEDIAINFO200ResponseWdrEnum[keyof typeof OGPMEDIAINFO200ResponseWdrEnum];


/**
 * Check if a given object implements the OGPMEDIAINFO200Response interface.
 */
export function instanceOfOGPMEDIAINFO200Response(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ao" in value;
    isInstance = isInstance && "avcProfile" in value;
    isInstance = isInstance && "cl" in value;
    isInstance = isInstance && "cre" in value;
    isInstance = isInstance && "ct" in value;
    isInstance = isInstance && "dur" in value;
    isInstance = isInstance && "eis" in value;
    isInstance = isInstance && "fps" in value;
    isInstance = isInstance && "fpsDenom" in value;
    isInstance = isInstance && "gumi" in value;
    isInstance = isInstance && "h" in value;
    isInstance = isInstance && "hc" in value;
    isInstance = isInstance && "ls" in value;
    isInstance = isInstance && "mp" in value;
    isInstance = isInstance && "profile" in value;
    isInstance = isInstance && "pta" in value;
    isInstance = isInstance && "rot" in value;
    isInstance = isInstance && "s" in value;
    isInstance = isInstance && "subsample" in value;
    isInstance = isInstance && "tr" in value;
    isInstance = isInstance && "us" in value;
    isInstance = isInstance && "w" in value;

    return isInstance;
}

export function OGPMEDIAINFO200ResponseFromJSON(json: any): OGPMEDIAINFO200Response {
    return OGPMEDIAINFO200ResponseFromJSONTyped(json, false);
}

export function OGPMEDIAINFO200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OGPMEDIAINFO200Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ao': json['ao'],
        'avcProfile': json['avc_profile'],
        'cl': json['cl'],
        'cre': json['cre'],
        'ct': json['ct'],
        'dur': json['dur'],
        'eis': json['eis'],
        'fov': !exists(json, 'fov') ? undefined : json['fov'],
        'fps': json['fps'],
        'fpsDenom': json['fps_denom'],
        'gumi': json['gumi'],
        'h': json['h'],
        'hc': json['hc'],
        'hi': !exists(json, 'hi') ? undefined : json['hi'],
        'lc': !exists(json, 'lc') ? undefined : json['lc'],
        'ls': json['ls'],
        'mos': !exists(json, 'mos') ? undefined : json['mos'],
        'mp': json['mp'],
        'prjn': !exists(json, 'prjn') ? undefined : json['prjn'],
        'profile': json['profile'],
        'progr': !exists(json, 'progr') ? undefined : json['progr'],
        'pta': json['pta'],
        'rot': json['rot'],
        's': json['s'],
        'subsample': json['subsample'],
        'tr': json['tr'],
        'us': json['us'],
        'w': json['w'],
        'hdr': !exists(json, 'hdr') ? undefined : json['hdr'],
        'raw': !exists(json, 'raw') ? undefined : json['raw'],
        'wdr': !exists(json, 'wdr') ? undefined : json['wdr'],
    };
}

export function OGPMEDIAINFO200ResponseToJSON(value?: OGPMEDIAINFO200Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ao': value.ao,
        'avc_profile': value.avcProfile,
        'cl': value.cl,
        'cre': value.cre,
        'ct': value.ct,
        'dur': value.dur,
        'eis': value.eis,
        'fov': value.fov,
        'fps': value.fps,
        'fps_denom': value.fpsDenom,
        'gumi': value.gumi,
        'h': value.h,
        'hc': value.hc,
        'hi': value.hi,
        'lc': value.lc,
        'ls': value.ls,
        'mos': value.mos,
        'mp': value.mp,
        'prjn': value.prjn,
        'profile': value.profile,
        'progr': value.progr,
        'pta': value.pta,
        'rot': value.rot,
        's': value.s,
        'subsample': value.subsample,
        'tr': value.tr,
        'us': value.us,
        'w': value.w,
        'hdr': value.hdr,
        'raw': value.raw,
        'wdr': value.wdr,
    };
}

