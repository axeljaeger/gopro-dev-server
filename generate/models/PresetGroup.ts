/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { Preset } from './Preset.js';
import {
    PresetFromJSON,
    PresetFromJSONTyped,
    PresetToJSON,
} from './Preset.js';

/**
 * A collection of Presets
 * @export
 * @interface PresetGroup
 */
export interface PresetGroup {
    /**
     * Is there room in the group to add additional Presets?
     * @type {boolean}
     * @memberof PresetGroup
     */
    canAddPreset?: boolean;
    /**
     * | ID | Name | Summary |
     * | -- | ---- | ------- |
     * | 0 | PRESET_GROUP_VIDEO_ICON_ID |  |
     * | 1 | PRESET_GROUP_PHOTO_ICON_ID |  |
     * | 2 | PRESET_GROUP_TIMELAPSE_ICON_ID |  |
     * | 3 | PRESET_GROUP_LONG_BAT_VIDEO_ICON_ID |  |
     * | 4 | PRESET_GROUP_ENDURANCE_VIDEO_ICON_ID |  |
     * | 5 | PRESET_GROUP_MAX_VIDEO_ICON_ID |  |
     * | 6 | PRESET_GROUP_MAX_PHOTO_ICON_ID |  |
     * | 7 | PRESET_GROUP_MAX_TIMELAPSE_ICON_ID |  |
     * @type {number}
     * @memberof PresetGroup
     */
    icon?: PresetGroupIconEnum;
    /**
     * | ID | Name | Summary |
     * | -- | ---- | ------- |
     * | 1000 | PRESET_GROUP_ID_VIDEO |  |
     * | 1001 | PRESET_GROUP_ID_PHOTO |  |
     * | 1002 | PRESET_GROUP_ID_TIMELAPSE |  |
     * @type {number}
     * @memberof PresetGroup
     */
    id?: PresetGroupIdEnum;
    /**
     * Array of Presets contained in this Preset Group
     * @type {Array<Preset>}
     * @memberof PresetGroup
     */
    presetArray?: Array<Preset>;
}


/**
 * @export
 */
export const PresetGroupIconEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;
export type PresetGroupIconEnum = typeof PresetGroupIconEnum[keyof typeof PresetGroupIconEnum];

/**
 * @export
 */
export const PresetGroupIdEnum = {
    NUMBER_1000: 1000,
    NUMBER_1001: 1001,
    NUMBER_1002: 1002
} as const;
export type PresetGroupIdEnum = typeof PresetGroupIdEnum[keyof typeof PresetGroupIdEnum];


/**
 * Check if a given object implements the PresetGroup interface.
 */
export function instanceOfPresetGroup(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PresetGroupFromJSON(json: any): PresetGroup {
    return PresetGroupFromJSONTyped(json, false);
}

export function PresetGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): PresetGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'canAddPreset': !exists(json, 'can_add_preset') ? undefined : json['can_add_preset'],
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'presetArray': !exists(json, 'preset_array') ? undefined : ((json['preset_array'] as Array<any>).map(PresetFromJSON)),
    };
}

export function PresetGroupToJSON(value?: PresetGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'can_add_preset': value.canAddPreset,
        'icon': value.icon,
        'id': value.id,
        'preset_array': value.presetArray === undefined ? undefined : ((value.presetArray as Array<any>).map(PresetToJSON)),
    };
}

