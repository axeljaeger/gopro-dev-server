/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';

export interface OGPADDHILIGHTRequest {
    path: string;
    ms?: number;
}

export interface OGPREMOVEHILIGHTRequest {
    path: string;
    ms?: number;
}

/**
 * 
 */
export class HilightsApi extends runtime.BaseAPI {

    /**
     * Add a hilight / tag to an existing photo or media file.  ---  Supported Cameras:   - HERO12 Black  - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Hilight a Media File
     */
    async oGPADDHILIGHTRaw(requestParameters: OGPADDHILIGHTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling oGPADDHILIGHT.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.ms !== undefined) {
            queryParameters['ms'] = requestParameters.ms;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/hilight/file`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Add a hilight / tag to an existing photo or media file.  ---  Supported Cameras:   - HERO12 Black  - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Hilight a Media File
     */
    async oGPADDHILIGHT(requestParameters: OGPADDHILIGHTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPADDHILIGHTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an existing hilight from a photo or video file.  ---  Supported Cameras:   - HERO12 Black  - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Remove Hilight
     */
    async oGPREMOVEHILIGHTRaw(requestParameters: OGPREMOVEHILIGHTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling oGPREMOVEHILIGHT.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.ms !== undefined) {
            queryParameters['ms'] = requestParameters.ms;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/hilight/remove`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove an existing hilight from a photo or video file.  ---  Supported Cameras:   - HERO12 Black  - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Remove Hilight
     */
    async oGPREMOVEHILIGHT(requestParameters: OGPREMOVEHILIGHTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPREMOVEHILIGHTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add hilight at current time while recording video  This can only be used during recording.   ---   Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Hilight While Recording
     */
    async oGPTAGMOMENTRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/hilight/moment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Add hilight at current time while recording video  This can only be used during recording.   ---   Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Hilight While Recording
     */
    async oGPTAGMOMENT(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPTAGMOMENTRaw(initOverrides);
        return await response.value();
    }

}
