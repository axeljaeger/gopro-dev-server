/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GPCAMERACUSTOMPRESETUPDATERequest,
  OGPPRESETSGET200Response,
} from '../models/index.js';
import {
    GPCAMERACUSTOMPRESETUPDATERequestFromJSON,
    GPCAMERACUSTOMPRESETUPDATERequestToJSON,
    OGPPRESETSGET200ResponseFromJSON,
    OGPPRESETSGET200ResponseToJSON,
} from '../models/index.js';

export interface GPCAMERACUSTOMPRESETUPDATEOperationRequest {
    gPCAMERACUSTOMPRESETUPDATERequest: GPCAMERACUSTOMPRESETUPDATERequest;
}

export interface OGPPRESETLOADRequest {
    id?: number;
}

export interface OGPPRESETSETGROUPRequest {
    id?: OGPPRESETSETGROUPIdEnum;
}

/**
 * 
 */
export class PresetsApi extends runtime.BaseAPI {

    /**
     * This only operates on the currently active Preset and will fail if the current Preset is not custom.   The use cases are:  1. Update the Custom Preset Icon      - `icon_id` is always optional and can always be passed   and / or  2. Update the Custom Preset Title to a...      - **Factory Preset Title**: Set `title_id` to a non-94 value     - **Custom Preset Name**: Set `title_id` to 94 and specify a `custom_name`   ---  Supported Cameras:    - HERO12 Black   ---  Supported Protocols:   - WIFI - USB 
     * Update Custom Preset
     */
    async gPCAMERACUSTOMPRESETUPDATERaw(requestParameters: GPCAMERACUSTOMPRESETUPDATEOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.gPCAMERACUSTOMPRESETUPDATERequest === null || requestParameters.gPCAMERACUSTOMPRESETUPDATERequest === undefined) {
            throw new runtime.RequiredError('gPCAMERACUSTOMPRESETUPDATERequest','Required parameter requestParameters.gPCAMERACUSTOMPRESETUPDATERequest was null or undefined when calling gPCAMERACUSTOMPRESETUPDATE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/gopro/camera/presets/update_custom`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GPCAMERACUSTOMPRESETUPDATERequestToJSON(requestParameters.gPCAMERACUSTOMPRESETUPDATERequest),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This only operates on the currently active Preset and will fail if the current Preset is not custom.   The use cases are:  1. Update the Custom Preset Icon      - `icon_id` is always optional and can always be passed   and / or  2. Update the Custom Preset Title to a...      - **Factory Preset Title**: Set `title_id` to a non-94 value     - **Custom Preset Name**: Set `title_id` to 94 and specify a `custom_name`   ---  Supported Cameras:    - HERO12 Black   ---  Supported Protocols:   - WIFI - USB 
     * Update Custom Preset
     */
    async gPCAMERACUSTOMPRESETUPDATE(requestParameters: GPCAMERACUSTOMPRESETUPDATEOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACUSTOMPRESETUPDATERaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Preset ID\'s are not constant and must be retrieved via [Get Preset Status](#operation/OGP_PRESETS_GET)   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black    ---  Supported Protocols:   - USB - WIFI 
     * Load Preset by ID
     */
    async oGPPRESETLOADRaw(requestParameters: OGPPRESETLOADRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/presets/load`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Preset ID\'s are not constant and must be retrieved via [Get Preset Status](#operation/OGP_PRESETS_GET)   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black    ---  Supported Protocols:   - USB - WIFI 
     * Load Preset by ID
     */
    async oGPPRESETLOAD(requestParameters: OGPPRESETLOADRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPPRESETLOADRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Load Preset Group by ID
     */
    async oGPPRESETSETGROUPRaw(requestParameters: OGPPRESETSETGROUPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/presets/set_group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Load Preset Group by ID
     */
    async oGPPRESETSETGROUP(requestParameters: OGPPRESETSETGROUPRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPPRESETSETGROUPRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the currently available Preset Groups and Presets, the set of which [depends](#tag/Presets/Presets) on the current camera settings.   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Available Presets
     */
    async oGPPRESETSGETRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OGPPRESETSGET200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/presets/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OGPPRESETSGET200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the currently available Preset Groups and Presets, the set of which [depends](#tag/Presets/Presets) on the current camera settings.   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Available Presets
     */
    async oGPPRESETSGET(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OGPPRESETSGET200Response> {
        const response = await this.oGPPRESETSGETRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OGPPRESETSETGROUPIdEnum = {
    NUMBER_1000: 1000,
    NUMBER_1001: 1001,
    NUMBER_1002: 1002
} as const;
export type OGPPRESETSETGROUPIdEnum = typeof OGPPRESETSETGROUPIdEnum[keyof typeof OGPPRESETSETGROUPIdEnum];
