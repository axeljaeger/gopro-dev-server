/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  OGPWEBCAMSTATUS200Response,
  OGPWEBCAMVERSION200Response,
} from '../models/index.js';
import {
    OGPWEBCAMSTATUS200ResponseFromJSON,
    OGPWEBCAMSTATUS200ResponseToJSON,
    OGPWEBCAMVERSION200ResponseFromJSON,
    OGPWEBCAMVERSION200ResponseToJSON,
} from '../models/index.js';

export interface OGPWEBCAMSTARTRequest {
    res?: number;
    fov?: number;
    port?: number;
    protocol?: OGPWEBCAMSTARTProtocolEnum;
}

/**
 * 
 */
export class WebcamApi extends runtime.BaseAPI {

    /**
     * Not supported on **WiFi** for:      - Hero 11 Black     - Hero 10 Black   ---  Supported Cameras:    - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Exit Webcam Mode
     */
    async oGPWEBCAMEXITRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/webcam/exit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Not supported on **WiFi** for:      - Hero 11 Black     - Hero 10 Black   ---  Supported Cameras:    - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Exit Webcam Mode
     */
    async oGPWEBCAMEXIT(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPWEBCAMEXITRaw(initOverrides);
        return await response.value();
    }

    /**
     * Not supported on **WiFi** for:      - Hero 11 Black     - Hero 10 Black   ---  Supported Cameras:    - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Enter Webcam Preview
     */
    async oGPWEBCAMPREVIEWRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/webcam/preview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Not supported on **WiFi** for:      - Hero 11 Black     - Hero 10 Black   ---  Supported Cameras:    - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Enter Webcam Preview
     */
    async oGPWEBCAMPREVIEW(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPWEBCAMPREVIEWRaw(initOverrides);
        return await response.value();
    }

    /**
     * Not supported on **WiFi** for:  - Hero 11 Black - Hero 10 Black   ---  Supported Cameras:    - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Start Webcam
     */
    async oGPWEBCAMSTARTRaw(requestParameters: OGPWEBCAMSTARTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.res !== undefined) {
            queryParameters['res'] = requestParameters.res;
        }

        if (requestParameters.fov !== undefined) {
            queryParameters['fov'] = requestParameters.fov;
        }

        if (requestParameters.port !== undefined) {
            queryParameters['port'] = requestParameters.port;
        }

        if (requestParameters.protocol !== undefined) {
            queryParameters['protocol'] = requestParameters.protocol;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/webcam/start`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Not supported on **WiFi** for:  - Hero 11 Black - Hero 10 Black   ---  Supported Cameras:    - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Start Webcam
     */
    async oGPWEBCAMSTART(requestParameters: OGPWEBCAMSTARTRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPWEBCAMSTARTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Webcam Status
     */
    async oGPWEBCAMSTATUSRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OGPWEBCAMSTATUS200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/webcam/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OGPWEBCAMSTATUS200ResponseFromJSON(jsonValue));
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Webcam Status
     */
    async oGPWEBCAMSTATUS(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OGPWEBCAMSTATUS200Response> {
        const response = await this.oGPWEBCAMSTATUSRaw(initOverrides);
        return await response.value();
    }

    /**
     * Not supported on **WiFi** for:     - Hero 11 Black Mini     - Hero 11 Black     - Hero 10 Black     - Hero 9 Black   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black   ---   Supported Protocols:   - USB - WIFI 
     * Stop Webcam
     */
    async oGPWEBCAMSTOPRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/webcam/stop`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Not supported on **WiFi** for:     - Hero 11 Black Mini     - Hero 11 Black     - Hero 10 Black     - Hero 9 Black   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black   ---   Supported Protocols:   - USB - WIFI 
     * Stop Webcam
     */
    async oGPWEBCAMSTOP(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPWEBCAMSTOPRaw(initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Webcam Version
     */
    async oGPWEBCAMVERSIONRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OGPWEBCAMVERSION200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/webcam/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OGPWEBCAMVERSION200ResponseFromJSON(jsonValue));
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Webcam Version
     */
    async oGPWEBCAMVERSION(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OGPWEBCAMVERSION200Response> {
        const response = await this.oGPWEBCAMVERSIONRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OGPWEBCAMSTARTProtocolEnum = {
    Rtsp: 'RTSP',
    Ts: 'TS'
} as const;
export type OGPWEBCAMSTARTProtocolEnum = typeof OGPWEBCAMSTARTProtocolEnum[keyof typeof OGPWEBCAMSTARTProtocolEnum];
