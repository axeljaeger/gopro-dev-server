/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';

export interface OGPDIGITALZOOMSETRequest {
    percent?: number;
}

export interface OGPSETCAMERACONTROLSTATUSRequest {
    p?: OGPSETCAMERACONTROLSTATUSPEnum;
}

export interface OGPSETDATEANDTIMEDSTIDRequest {
    date?: string;
    time?: string;
    tzone?: number;
    dst?: OGPSETDATEANDTIMEDSTIDDstEnum;
}

export interface OGPSETWIREDUSBCONTROLRequest {
    p?: OGPSETWIREDUSBCONTROLPEnum;
}

export interface OGPSHUTTERRequest {
    mode?: OGPSHUTTERModeEnum;
}

export interface OGPTURBOMODEENABLERequest {
    p?: OGPTURBOMODEENABLEPEnum;
}

/**
 * 
 */
export class ControlApi extends runtime.BaseAPI {

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Set Digital Zoom
     */
    async oGPDIGITALZOOMSETRaw(requestParameters: OGPDIGITALZOOMSETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/digital_zoom`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Set Digital Zoom
     */
    async oGPDIGITALZOOMSET(requestParameters: OGPDIGITALZOOMSETRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPDIGITALZOOMSETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * In order to maximize battery life, GoPro cameras automatically go to sleep after some time. This logic is handled by a combination of the **Auto Power Down** setting which most (but not all) cameras support and a **Keep Alive** message that the user can regularly send to the camera.  The camera will automatically go to sleep if both timers reach zero.  The Auto Power Down timer is reset when the user taps the LCD screen, presses a button on the camera, programmatically (un)sets the shutter, sets a setting, or loads a Preset.  The Keep Alive timer is reset when the user sends a keep alive message.  The best practice to prevent the camera from inadvertently going to sleep is to start sending Keep Alive messages every **3.0** seconds after a connection is established.   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Keep Alive
     */
    async oGPKEEPALIVERaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/keep_alive`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * In order to maximize battery life, GoPro cameras automatically go to sleep after some time. This logic is handled by a combination of the **Auto Power Down** setting which most (but not all) cameras support and a **Keep Alive** message that the user can regularly send to the camera.  The camera will automatically go to sleep if both timers reach zero.  The Auto Power Down timer is reset when the user taps the LCD screen, presses a button on the camera, programmatically (un)sets the shutter, sets a setting, or loads a Preset.  The Keep Alive timer is reset when the user sends a keep alive message.  The best practice to prevent the camera from inadvertently going to sleep is to start sending Keep Alive messages every **3.0** seconds after a connection is established.   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Keep Alive
     */
    async oGPKEEPALIVE(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPKEEPALIVERaw(initOverrides);
        return await response.value();
    }

    /**
     * This command is used to tell the camera that a client (i.e. External Control) wishes to claim control of the camera. This causes the camera to immediately exit any contextual menus and return to the idle screen. Any interaction with the camera\'s physical buttons will cause the camera to reclaim control and update control status accordingly. If the user returns the camera UI to the idle screen, the camera updates control status to Idle.   Note:  - The entity currently claiming control of the camera is advertised in camera status 114 - Information about whether the camera is in a contextual menu or not is advertised in camera status 63.  See the below diagram for a state diagram of Camera Control:  ![global behaviors state diagram](./assets/images/openapi/global_behaviors.png)    ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black   ---   Supported Protocols:   - USB - WIFI 
     * Set Camera Control Status
     */
    async oGPSETCAMERACONTROLSTATUSRaw(requestParameters: OGPSETCAMERACONTROLSTATUSRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.p !== undefined) {
            queryParameters['p'] = requestParameters.p;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/control/set_ui_controller`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * This command is used to tell the camera that a client (i.e. External Control) wishes to claim control of the camera. This causes the camera to immediately exit any contextual menus and return to the idle screen. Any interaction with the camera\'s physical buttons will cause the camera to reclaim control and update control status accordingly. If the user returns the camera UI to the idle screen, the camera updates control status to Idle.   Note:  - The entity currently claiming control of the camera is advertised in camera status 114 - Information about whether the camera is in a contextual menu or not is advertised in camera status 63.  See the below diagram for a state diagram of Camera Control:  ![global behaviors state diagram](./assets/images/openapi/global_behaviors.png)    ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black   ---   Supported Protocols:   - USB - WIFI 
     * Set Camera Control Status
     */
    async oGPSETCAMERACONTROLSTATUS(requestParameters: OGPSETCAMERACONTROLSTATUSRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPSETCAMERACONTROLSTATUSRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Set Date / Time
     */
    async oGPSETDATEANDTIMEDSTIDRaw(requestParameters: OGPSETDATEANDTIMEDSTIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.tzone !== undefined) {
            queryParameters['tzone'] = requestParameters.tzone;
        }

        if (requestParameters.dst !== undefined) {
            queryParameters['dst'] = requestParameters.dst;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/set_date_time`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Set Date / Time
     */
    async oGPSETDATEANDTIMEDSTID(requestParameters: OGPSETDATEANDTIMEDSTIDRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPSETDATEANDTIMEDSTIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black    ---  Supported Protocols:   - USB - WIFI 
     * Enable Wired camera control over USB
     */
    async oGPSETWIREDUSBCONTROLRaw(requestParameters: OGPSETWIREDUSBCONTROLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.p !== undefined) {
            queryParameters['p'] = requestParameters.p;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/control/wired_usb`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black    ---  Supported Protocols:   - USB - WIFI 
     * Enable Wired camera control over USB
     */
    async oGPSETWIREDUSBCONTROL(requestParameters: OGPSETWIREDUSBCONTROLRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPSETWIREDUSBCONTROLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black    ---  Supported Protocols:   - USB - WIFI 
     * Set Shutter
     */
    async oGPSHUTTERRaw(requestParameters: OGPSHUTTERRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/shutter/{mode}`.replace(`{${"mode"}}`, encodeURIComponent(String(requestParameters.mode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black    ---  Supported Protocols:   - USB - WIFI 
     * Set Shutter
     */
    async oGPSHUTTER(requestParameters: OGPSHUTTERRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPSHUTTERRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Some cameras support Turbo Transfer mode, which allows media to be downloaded over WiFi more rapidly.   This special mode should only be used during media offload.  It is recommended that the user check for and, if necessary, disable Turbo Transfer on connection.   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Configure Turbo Transfer
     */
    async oGPTURBOMODEENABLERaw(requestParameters: OGPTURBOMODEENABLERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters.p !== undefined) {
            queryParameters['p'] = requestParameters.p;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/turbo_transfer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Some cameras support Turbo Transfer mode, which allows media to be downloaded over WiFi more rapidly.   This special mode should only be used during media offload.  It is recommended that the user check for and, if necessary, disable Turbo Transfer on connection.   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Configure Turbo Transfer
     */
    async oGPTURBOMODEENABLE(requestParameters: OGPTURBOMODEENABLERequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.oGPTURBOMODEENABLERaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OGPSETCAMERACONTROLSTATUSPEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type OGPSETCAMERACONTROLSTATUSPEnum = typeof OGPSETCAMERACONTROLSTATUSPEnum[keyof typeof OGPSETCAMERACONTROLSTATUSPEnum];
/**
 * @export
 */
export const OGPSETDATEANDTIMEDSTIDDstEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type OGPSETDATEANDTIMEDSTIDDstEnum = typeof OGPSETDATEANDTIMEDSTIDDstEnum[keyof typeof OGPSETDATEANDTIMEDSTIDDstEnum];
/**
 * @export
 */
export const OGPSETWIREDUSBCONTROLPEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type OGPSETWIREDUSBCONTROLPEnum = typeof OGPSETWIREDUSBCONTROLPEnum[keyof typeof OGPSETWIREDUSBCONTROLPEnum];
/**
 * @export
 */
export const OGPSHUTTERModeEnum = {
    Start: 'start',
    Stop: 'stop'
} as const;
export type OGPSHUTTERModeEnum = typeof OGPSHUTTERModeEnum[keyof typeof OGPSHUTTERModeEnum];
/**
 * @export
 */
export const OGPTURBOMODEENABLEPEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type OGPTURBOMODEENABLEPEnum = typeof OGPTURBOMODEENABLEPEnum[keyof typeof OGPTURBOMODEENABLEPEnum];
