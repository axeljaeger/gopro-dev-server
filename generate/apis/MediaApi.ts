/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  MediaList,
  OGPGETLASTMEDIA200Response,
  OGPMEDIAINFO200Response,
} from '../models/index.js';
import {
    MediaListFromJSON,
    MediaListToJSON,
    OGPGETLASTMEDIA200ResponseFromJSON,
    OGPGETLASTMEDIA200ResponseToJSON,
    OGPMEDIAINFO200ResponseFromJSON,
    OGPMEDIAINFO200ResponseToJSON,
} from '../models/index.js';

export interface OGPDOWNLOADMEDIARequest {
    directory: string;
    filename: string;
}

export interface OGPMEDIAGPMFRequest {
    path?: string;
}

export interface OGPMEDIAINFORequest {
    path?: string;
}

export interface OGPMEDIASCREENNAILRequest {
    path?: string;
}

export interface OGPMEDIATELEMETRYRequest {
    path?: string;
}

export interface OGPMEDIATHUMBNAILRequest {
    path?: string;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     * Note that this is the same endpoint for all media (photos, video, etc.).   ---  Supported Cameras:    - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:    - USB - WIFI 
     * Download a Media File
     */
    async oGPDOWNLOADMEDIARaw(requestParameters: OGPDOWNLOADMEDIARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.directory === null || requestParameters.directory === undefined) {
            throw new runtime.RequiredError('directory','Required parameter requestParameters.directory was null or undefined when calling oGPDOWNLOADMEDIA.');
        }

        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling oGPDOWNLOADMEDIA.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/videos/DCIM/{directory}/{filename}`.replace(`{${"directory"}}`, encodeURIComponent(String(requestParameters.directory))).replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters.filename))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Note that this is the same endpoint for all media (photos, video, etc.).   ---  Supported Cameras:    - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:    - USB - WIFI 
     * Download a Media File
     */
    async oGPDOWNLOADMEDIA(requestParameters: OGPDOWNLOADMEDIARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oGPDOWNLOADMEDIARaw(requestParameters, initOverrides);
    }

    /**
     * This will return the complete path of the last captured media. Depending on the type of media captured, it will return:  - single photo / video: The single media path - any grouped media: The path to the first captured media in the group   ---  Supported Cameras:   - HERO12 Black   ---  Supported Protocols:   - WIFI  - USB 
     * Get Last Captured Media
     */
    async oGPGETLASTMEDIARaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OGPGETLASTMEDIA200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/last_captured`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OGPGETLASTMEDIA200ResponseFromJSON(jsonValue));
    }

    /**
     * This will return the complete path of the last captured media. Depending on the type of media captured, it will return:  - single photo / video: The single media path - any grouped media: The path to the first captured media in the group   ---  Supported Cameras:   - HERO12 Black   ---  Supported Protocols:   - WIFI  - USB 
     * Get Last Captured Media
     */
    async oGPGETLASTMEDIA(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OGPGETLASTMEDIA200Response> {
        const response = await this.oGPGETLASTMEDIARaw(initOverrides);
        return await response.value();
    }

    /**
     * None  ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File GPMF
     */
    async oGPMEDIAGPMFRaw(requestParameters: OGPMEDIAGPMFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/gpmf`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * None  ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File GPMF
     */
    async oGPMEDIAGPMF(requestParameters: OGPMEDIAGPMFRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.oGPMEDIAGPMFRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File Info
     */
    async oGPMEDIAINFORaw(requestParameters: OGPMEDIAINFORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OGPMEDIAINFO200Response>> {
        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OGPMEDIAINFO200ResponseFromJSON(jsonValue));
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File Info
     */
    async oGPMEDIAINFO(requestParameters: OGPMEDIAINFORequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OGPMEDIAINFO200Response> {
        const response = await this.oGPMEDIAINFORaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * To minimize the size of the JSON transmitted by the camera, grouped media items such as Burst Photos,  Time Lapse Photos, Night Lapse Photos, etc are represented with a single item in the media list with additional keys  that allow the user to extrapolate individual filenames for each member of the group.  Filenames for group media items have the form \"GXXXYYYY.ZZZ\" where XXX is the group ID, YYY is the group member ID and ZZZ is the file extension.   For example, take the media list below, which contains a Time Lapse Photo group media item:  ```json {     \"id\": \"2530266050123724003\",     \"media\": [         {             \"d\": \"100GOPRO\",             \"fs\" : [                 {                     \"b\": \"8\",                     \"cre\": \"1613669353\",                     \"g\": \"1\",                     \"l\": \"396\",                     \"m\": [\"75\", \"139\"],                     \"mod\": \"1613669353\",                     \"n\": \"G0010008.JPG\",                     \"s\": \"773977407\",                     \"t\": \"t\"                 }             ]         }     ] } ```   The first filename in the group is `G0010008.JP` (key: `n`).  The ID of the first group member in this case is `008` (key: `b`).  The ID of the last group member in this case is `396` (key: `l`).  The IDs of deleted members in this case are `75` and `139` (key: `m`)  Given this information, the user can extrapolate that the group currently contains  ``` G0010008.JPG, G0010009.JPG, G0010010.JPG, ..., G0010074.JPG, G0010076.JPG, ..., G0010138.JPG, G0010140.JPG, ..., G0010394.JPG, G0010395.JPG. G0010396.JPG ```   ---  Supported Cameras:   - HERO12 Black  - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media List
     */
    async oGPMEDIALISTRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaListFromJSON(jsonValue));
    }

    /**
     * To minimize the size of the JSON transmitted by the camera, grouped media items such as Burst Photos,  Time Lapse Photos, Night Lapse Photos, etc are represented with a single item in the media list with additional keys  that allow the user to extrapolate individual filenames for each member of the group.  Filenames for group media items have the form \"GXXXYYYY.ZZZ\" where XXX is the group ID, YYY is the group member ID and ZZZ is the file extension.   For example, take the media list below, which contains a Time Lapse Photo group media item:  ```json {     \"id\": \"2530266050123724003\",     \"media\": [         {             \"d\": \"100GOPRO\",             \"fs\" : [                 {                     \"b\": \"8\",                     \"cre\": \"1613669353\",                     \"g\": \"1\",                     \"l\": \"396\",                     \"m\": [\"75\", \"139\"],                     \"mod\": \"1613669353\",                     \"n\": \"G0010008.JPG\",                     \"s\": \"773977407\",                     \"t\": \"t\"                 }             ]         }     ] } ```   The first filename in the group is `G0010008.JP` (key: `n`).  The ID of the first group member in this case is `008` (key: `b`).  The ID of the last group member in this case is `396` (key: `l`).  The IDs of deleted members in this case are `75` and `139` (key: `m`)  Given this information, the user can extrapolate that the group currently contains  ``` G0010008.JPG, G0010009.JPG, G0010010.JPG, ..., G0010074.JPG, G0010076.JPG, ..., G0010138.JPG, G0010140.JPG, ..., G0010394.JPG, G0010395.JPG. G0010396.JPG ```   ---  Supported Cameras:   - HERO12 Black  - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media List
     */
    async oGPMEDIALIST(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaList> {
        const response = await this.oGPMEDIALISTRaw(initOverrides);
        return await response.value();
    }

    /**
     * A screennail is a low-res preview image that is higher resolution than a thumbnail.  ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File Screennail
     */
    async oGPMEDIASCREENNAILRaw(requestParameters: OGPMEDIASCREENNAILRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/screennail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * A screennail is a low-res preview image that is higher resolution than a thumbnail.  ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File Screennail
     */
    async oGPMEDIASCREENNAIL(requestParameters: OGPMEDIASCREENNAILRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.oGPMEDIASCREENNAILRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Media File Telemetry track data  ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini  - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File Telemetry
     */
    async oGPMEDIATELEMETRYRaw(requestParameters: OGPMEDIATELEMETRYRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/telemetry`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get Media File Telemetry track data  ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini  - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File Telemetry
     */
    async oGPMEDIATELEMETRY(requestParameters: OGPMEDIATELEMETRYRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.oGPMEDIATELEMETRYRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File Thumbnail
     */
    async oGPMEDIATHUMBNAILRaw(requestParameters: OGPMEDIATHUMBNAILRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/thumbnail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Media File Thumbnail
     */
    async oGPMEDIATHUMBNAIL(requestParameters: OGPMEDIATHUMBNAILRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.oGPMEDIATHUMBNAILRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
