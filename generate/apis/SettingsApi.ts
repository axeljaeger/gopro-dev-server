/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';

export interface GPCAMERACHANGESETTING108Request {
    option: GPCAMERACHANGESETTING108OptionEnum;
}

export interface GPCAMERACHANGESETTING121Request {
    option: GPCAMERACHANGESETTING121OptionEnum;
}

export interface GPCAMERACHANGESETTING122Request {
    option: GPCAMERACHANGESETTING122OptionEnum;
}

export interface GPCAMERACHANGESETTING123Request {
    option: GPCAMERACHANGESETTING123OptionEnum;
}

export interface GPCAMERACHANGESETTING128Request {
    option: GPCAMERACHANGESETTING128OptionEnum;
}

export interface GPCAMERACHANGESETTING134Request {
    option: GPCAMERACHANGESETTING134OptionEnum;
}

export interface GPCAMERACHANGESETTING135Request {
    option: GPCAMERACHANGESETTING135OptionEnum;
}

export interface GPCAMERACHANGESETTING150Request {
    option: GPCAMERACHANGESETTING150OptionEnum;
}

export interface GPCAMERACHANGESETTING151Request {
    option: GPCAMERACHANGESETTING151OptionEnum;
}

export interface GPCAMERACHANGESETTING162Request {
    option: GPCAMERACHANGESETTING162OptionEnum;
}

export interface GPCAMERACHANGESETTING167Request {
    option: GPCAMERACHANGESETTING167OptionEnum;
}

export interface GPCAMERACHANGESETTING171Request {
    option: GPCAMERACHANGESETTING171OptionEnum;
}

export interface GPCAMERACHANGESETTING172Request {
    option: GPCAMERACHANGESETTING172OptionEnum;
}

export interface GPCAMERACHANGESETTING173Request {
    option: GPCAMERACHANGESETTING173OptionEnum;
}

export interface GPCAMERACHANGESETTING175Request {
    option: GPCAMERACHANGESETTING175OptionEnum;
}

export interface GPCAMERACHANGESETTING176Request {
    option: GPCAMERACHANGESETTING176OptionEnum;
}

export interface GPCAMERACHANGESETTING177Request {
    option: GPCAMERACHANGESETTING177OptionEnum;
}

export interface GPCAMERACHANGESETTING178Request {
    option: GPCAMERACHANGESETTING178OptionEnum;
}

export interface GPCAMERACHANGESETTING179Request {
    option: GPCAMERACHANGESETTING179OptionEnum;
}

export interface GPCAMERACHANGESETTING180Request {
    option: GPCAMERACHANGESETTING180OptionEnum;
}

export interface GPCAMERACHANGESETTING182Request {
    option: GPCAMERACHANGESETTING182OptionEnum;
}

export interface GPCAMERACHANGESETTING183Request {
    option: GPCAMERACHANGESETTING183OptionEnum;
}

export interface GPCAMERACHANGESETTING184Request {
    option: GPCAMERACHANGESETTING184OptionEnum;
}

export interface GPCAMERACHANGESETTING186Request {
    option: GPCAMERACHANGESETTING186OptionEnum;
}

export interface GPCAMERACHANGESETTING187Request {
    option: GPCAMERACHANGESETTING187OptionEnum;
}

export interface GPCAMERACHANGESETTING189Request {
    option: GPCAMERACHANGESETTING189OptionEnum;
}

export interface GPCAMERACHANGESETTING190Request {
    option: GPCAMERACHANGESETTING190OptionEnum;
}

export interface GPCAMERACHANGESETTING191Request {
    option: GPCAMERACHANGESETTING191OptionEnum;
}

export interface GPCAMERACHANGESETTING192Request {
    option: GPCAMERACHANGESETTING192OptionEnum;
}

export interface GPCAMERACHANGESETTING193Request {
    option: GPCAMERACHANGESETTING193OptionEnum;
}

export interface GPCAMERACHANGESETTING2Request {
    option: GPCAMERACHANGESETTING2OptionEnum;
}

export interface GPCAMERACHANGESETTING3Request {
    option: GPCAMERACHANGESETTING3OptionEnum;
}

export interface GPCAMERACHANGESETTING43Request {
    option: GPCAMERACHANGESETTING43OptionEnum;
}

export interface GPCAMERACHANGESETTING59Request {
    option: GPCAMERACHANGESETTING59OptionEnum;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Video Aspect Ratio (108)
     */
    async gPCAMERACHANGESETTING108Raw(requestParameters: GPCAMERACHANGESETTING108Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING108.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/108/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Video Aspect Ratio (108)
     */
    async gPCAMERACHANGESETTING108(requestParameters: GPCAMERACHANGESETTING108Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING108Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Video Digital Lenses (121)
     */
    async gPCAMERACHANGESETTING121Raw(requestParameters: GPCAMERACHANGESETTING121Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING121.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/121/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Video Digital Lenses (121)
     */
    async gPCAMERACHANGESETTING121(requestParameters: GPCAMERACHANGESETTING121Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING121Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black - HERO9 Black  
     * Photo Digital Lenses (122)
     */
    async gPCAMERACHANGESETTING122Raw(requestParameters: GPCAMERACHANGESETTING122Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING122.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/122/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black - HERO9 Black  
     * Photo Digital Lenses (122)
     */
    async gPCAMERACHANGESETTING122(requestParameters: GPCAMERACHANGESETTING122Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING122Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black - HERO9 Black  
     * Multi Shot Digital Lenses (123)
     */
    async gPCAMERACHANGESETTING123Raw(requestParameters: GPCAMERACHANGESETTING123Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING123.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/123/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black - HERO9 Black  
     * Multi Shot Digital Lenses (123)
     */
    async gPCAMERACHANGESETTING123(requestParameters: GPCAMERACHANGESETTING123Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING123Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black - HERO9 Black  
     * General Format (128)
     */
    async gPCAMERACHANGESETTING128Raw(requestParameters: GPCAMERACHANGESETTING128Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING128.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/128/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black - HERO9 Black  
     * General Format (128)
     */
    async gPCAMERACHANGESETTING128(requestParameters: GPCAMERACHANGESETTING128Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING128Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Setup Anti Flicker (134)
     */
    async gPCAMERACHANGESETTING134Raw(requestParameters: GPCAMERACHANGESETTING134Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING134.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/134/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Setup Anti Flicker (134)
     */
    async gPCAMERACHANGESETTING134(requestParameters: GPCAMERACHANGESETTING134Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING134Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Video Hypersmooth (135)
     */
    async gPCAMERACHANGESETTING135Raw(requestParameters: GPCAMERACHANGESETTING135Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING135.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/135/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Video Hypersmooth (135)
     */
    async gPCAMERACHANGESETTING135(requestParameters: GPCAMERACHANGESETTING135Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING135Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black  
     * Video Horizon Levelling (150)
     */
    async gPCAMERACHANGESETTING150Raw(requestParameters: GPCAMERACHANGESETTING150Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING150.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/150/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black  
     * Video Horizon Levelling (150)
     */
    async gPCAMERACHANGESETTING150(requestParameters: GPCAMERACHANGESETTING150Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING150Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black  
     * Photo Horizon Levelling (151)
     */
    async gPCAMERACHANGESETTING151Raw(requestParameters: GPCAMERACHANGESETTING151Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING151.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/151/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black  
     * Photo Horizon Levelling (151)
     */
    async gPCAMERACHANGESETTING151(requestParameters: GPCAMERACHANGESETTING151Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING151Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black - HERO10 Black - HERO9 Black  
     * Mods Max Lens Enable (162)
     */
    async gPCAMERACHANGESETTING162Raw(requestParameters: GPCAMERACHANGESETTING162Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING162.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/162/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black - HERO10 Black - HERO9 Black  
     * Mods Max Lens Enable (162)
     */
    async gPCAMERACHANGESETTING162(requestParameters: GPCAMERACHANGESETTING162Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING162Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black - HERO9 Black  
     * Video Hindsight Length (167)
     */
    async gPCAMERACHANGESETTING167Raw(requestParameters: GPCAMERACHANGESETTING167Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING167.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/167/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black - HERO10 Black - HERO9 Black  
     * Video Hindsight Length (167)
     */
    async gPCAMERACHANGESETTING167(requestParameters: GPCAMERACHANGESETTING167Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING167Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Photo Single Interval (171)
     */
    async gPCAMERACHANGESETTING171Raw(requestParameters: GPCAMERACHANGESETTING171Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING171.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/171/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Photo Single Interval (171)
     */
    async gPCAMERACHANGESETTING171(requestParameters: GPCAMERACHANGESETTING171Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING171Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Photo Interval Duration (172)
     */
    async gPCAMERACHANGESETTING172Raw(requestParameters: GPCAMERACHANGESETTING172Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING172.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/172/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Photo Interval Duration (172)
     */
    async gPCAMERACHANGESETTING172(requestParameters: GPCAMERACHANGESETTING172Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING172Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO10 Black  
     * System Power Profile (173)
     */
    async gPCAMERACHANGESETTING173Raw(requestParameters: GPCAMERACHANGESETTING173Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING173.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/173/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO10 Black  
     * System Power Profile (173)
     */
    async gPCAMERACHANGESETTING173(requestParameters: GPCAMERACHANGESETTING173Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING173Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black  
     * Setup Camera Ux Mode (175)
     */
    async gPCAMERACHANGESETTING175Raw(requestParameters: GPCAMERACHANGESETTING175Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING175.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/175/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black  
     * Setup Camera Ux Mode (175)
     */
    async gPCAMERACHANGESETTING175(requestParameters: GPCAMERACHANGESETTING175Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING175Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black  
     * Video Easy Mode Speed (176)
     */
    async gPCAMERACHANGESETTING176Raw(requestParameters: GPCAMERACHANGESETTING176Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING176.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/176/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black  
     * Video Easy Mode Speed (176)
     */
    async gPCAMERACHANGESETTING176(requestParameters: GPCAMERACHANGESETTING176Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING176Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black  
     * Photo Easy Mode Night Photo (177)
     */
    async gPCAMERACHANGESETTING177Raw(requestParameters: GPCAMERACHANGESETTING177Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING177.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/177/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black  
     * Photo Easy Mode Night Photo (177)
     */
    async gPCAMERACHANGESETTING177(requestParameters: GPCAMERACHANGESETTING177Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING177Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black  
     * Wireless Wireless Band (178)
     */
    async gPCAMERACHANGESETTING178Raw(requestParameters: GPCAMERACHANGESETTING178Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING178.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/178/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black  
     * Wireless Wireless Band (178)
     */
    async gPCAMERACHANGESETTING178(requestParameters: GPCAMERACHANGESETTING178Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING178Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black  
     * Multi Shot Trail Length (179)
     */
    async gPCAMERACHANGESETTING179Raw(requestParameters: GPCAMERACHANGESETTING179Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING179.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/179/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black  
     * Multi Shot Trail Length (179)
     */
    async gPCAMERACHANGESETTING179(requestParameters: GPCAMERACHANGESETTING179Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING179Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black  
     * System Video Mode (180)
     */
    async gPCAMERACHANGESETTING180Raw(requestParameters: GPCAMERACHANGESETTING180Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING180.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/180/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black  
     * System Video Mode (180)
     */
    async gPCAMERACHANGESETTING180(requestParameters: GPCAMERACHANGESETTING180Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING180Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * System Video Bit Rate (182)
     */
    async gPCAMERACHANGESETTING182Raw(requestParameters: GPCAMERACHANGESETTING182Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING182.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/182/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * System Video Bit Rate (182)
     */
    async gPCAMERACHANGESETTING182(requestParameters: GPCAMERACHANGESETTING182Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING182Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * System Video Bit Depth (183)
     */
    async gPCAMERACHANGESETTING183Raw(requestParameters: GPCAMERACHANGESETTING183Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING183.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/183/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * System Video Bit Depth (183)
     */
    async gPCAMERACHANGESETTING183(requestParameters: GPCAMERACHANGESETTING183Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING183Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Video Profile (184)
     */
    async gPCAMERACHANGESETTING184Raw(requestParameters: GPCAMERACHANGESETTING184Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING184.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/184/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Video Profile (184)
     */
    async gPCAMERACHANGESETTING184(requestParameters: GPCAMERACHANGESETTING184Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING184Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Video Easy Presets (186)
     */
    async gPCAMERACHANGESETTING186Raw(requestParameters: GPCAMERACHANGESETTING186Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING186.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/186/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Video Easy Presets (186)
     */
    async gPCAMERACHANGESETTING186(requestParameters: GPCAMERACHANGESETTING186Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING186Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Multi Shot Easy Presets (187)
     */
    async gPCAMERACHANGESETTING187Raw(requestParameters: GPCAMERACHANGESETTING187Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING187.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/187/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Multi Shot Easy Presets (187)
     */
    async gPCAMERACHANGESETTING187(requestParameters: GPCAMERACHANGESETTING187Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING187Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * System Addon Lens Active (189)
     */
    async gPCAMERACHANGESETTING189Raw(requestParameters: GPCAMERACHANGESETTING189Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING189.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/189/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * System Addon Lens Active (189)
     */
    async gPCAMERACHANGESETTING189(requestParameters: GPCAMERACHANGESETTING189Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING189Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * System Addon Lens Status (190)
     */
    async gPCAMERACHANGESETTING190Raw(requestParameters: GPCAMERACHANGESETTING190Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING190.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/190/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * System Addon Lens Status (190)
     */
    async gPCAMERACHANGESETTING190(requestParameters: GPCAMERACHANGESETTING190Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING190Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Photo Easy Presets (191)
     */
    async gPCAMERACHANGESETTING191Raw(requestParameters: GPCAMERACHANGESETTING191Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING191.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/191/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Photo Easy Presets (191)
     */
    async gPCAMERACHANGESETTING191(requestParameters: GPCAMERACHANGESETTING191Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING191Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Multi Shot Nlv Aspect Ratio (192)
     */
    async gPCAMERACHANGESETTING192Raw(requestParameters: GPCAMERACHANGESETTING192Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING192.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/192/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Multi Shot Nlv Aspect Ratio (192)
     */
    async gPCAMERACHANGESETTING192(requestParameters: GPCAMERACHANGESETTING192Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING192Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Video Easy Framing (193)
     */
    async gPCAMERACHANGESETTING193Raw(requestParameters: GPCAMERACHANGESETTING193Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING193.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/193/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black  
     * Video Easy Framing (193)
     */
    async gPCAMERACHANGESETTING193(requestParameters: GPCAMERACHANGESETTING193Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING193Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Video Resolution (2)
     */
    async gPCAMERACHANGESETTING2Raw(requestParameters: GPCAMERACHANGESETTING2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/2/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Video Resolution (2)
     */
    async gPCAMERACHANGESETTING2(requestParameters: GPCAMERACHANGESETTING2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Video Fps (3)
     */
    async gPCAMERACHANGESETTING3Raw(requestParameters: GPCAMERACHANGESETTING3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/3/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Video Fps (3)
     */
    async gPCAMERACHANGESETTING3(requestParameters: GPCAMERACHANGESETTING3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Broadcast Fov (43)
     */
    async gPCAMERACHANGESETTING43Raw(requestParameters: GPCAMERACHANGESETTING43Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING43.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/43/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Broadcast Fov (43)
     */
    async gPCAMERACHANGESETTING43(requestParameters: GPCAMERACHANGESETTING43Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING43Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Setup Auto Power Down (59)
     */
    async gPCAMERACHANGESETTING59Raw(requestParameters: GPCAMERACHANGESETTING59Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.option === null || requestParameters.option === undefined) {
            throw new runtime.RequiredError('option','Required parameter requestParameters.option was null or undefined when calling gPCAMERACHANGESETTING59.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/setting/59/{option}`.replace(`{${"option"}}`, encodeURIComponent(String(requestParameters.option))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black  
     * Setup Auto Power Down (59)
     */
    async gPCAMERACHANGESETTING59(requestParameters: GPCAMERACHANGESETTING59Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.gPCAMERACHANGESETTING59Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GPCAMERACHANGESETTING108OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type GPCAMERACHANGESETTING108OptionEnum = typeof GPCAMERACHANGESETTING108OptionEnum[keyof typeof GPCAMERACHANGESETTING108OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING121OptionEnum = {
    NUMBER_0: 0,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11
} as const;
export type GPCAMERACHANGESETTING121OptionEnum = typeof GPCAMERACHANGESETTING121OptionEnum[keyof typeof GPCAMERACHANGESETTING121OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING122OptionEnum = {
    NUMBER_19: 19,
    NUMBER_100: 100,
    NUMBER_101: 101,
    NUMBER_102: 102
} as const;
export type GPCAMERACHANGESETTING122OptionEnum = typeof GPCAMERACHANGESETTING122OptionEnum[keyof typeof GPCAMERACHANGESETTING122OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING123OptionEnum = {
    NUMBER_19: 19,
    NUMBER_100: 100,
    NUMBER_101: 101,
    NUMBER_102: 102
} as const;
export type GPCAMERACHANGESETTING123OptionEnum = typeof GPCAMERACHANGESETTING123OptionEnum[keyof typeof GPCAMERACHANGESETTING123OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING128OptionEnum = {
    NUMBER_13: 13,
    NUMBER_20: 20,
    NUMBER_21: 21,
    NUMBER_26: 26
} as const;
export type GPCAMERACHANGESETTING128OptionEnum = typeof GPCAMERACHANGESETTING128OptionEnum[keyof typeof GPCAMERACHANGESETTING128OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING134OptionEnum = {
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GPCAMERACHANGESETTING134OptionEnum = typeof GPCAMERACHANGESETTING134OptionEnum[keyof typeof GPCAMERACHANGESETTING134OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING135OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_100: 100
} as const;
export type GPCAMERACHANGESETTING135OptionEnum = typeof GPCAMERACHANGESETTING135OptionEnum[keyof typeof GPCAMERACHANGESETTING135OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING150OptionEnum = {
    NUMBER_0: 0,
    NUMBER_2: 2
} as const;
export type GPCAMERACHANGESETTING150OptionEnum = typeof GPCAMERACHANGESETTING150OptionEnum[keyof typeof GPCAMERACHANGESETTING150OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING151OptionEnum = {
    NUMBER_0: 0,
    NUMBER_2: 2
} as const;
export type GPCAMERACHANGESETTING151OptionEnum = typeof GPCAMERACHANGESETTING151OptionEnum[keyof typeof GPCAMERACHANGESETTING151OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING162OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type GPCAMERACHANGESETTING162OptionEnum = typeof GPCAMERACHANGESETTING162OptionEnum[keyof typeof GPCAMERACHANGESETTING162OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING167OptionEnum = {
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type GPCAMERACHANGESETTING167OptionEnum = typeof GPCAMERACHANGESETTING167OptionEnum[keyof typeof GPCAMERACHANGESETTING167OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING171OptionEnum = {
    NUMBER_0: 0,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10
} as const;
export type GPCAMERACHANGESETTING171OptionEnum = typeof GPCAMERACHANGESETTING171OptionEnum[keyof typeof GPCAMERACHANGESETTING171OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING172OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9
} as const;
export type GPCAMERACHANGESETTING172OptionEnum = typeof GPCAMERACHANGESETTING172OptionEnum[keyof typeof GPCAMERACHANGESETTING172OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING173OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type GPCAMERACHANGESETTING173OptionEnum = typeof GPCAMERACHANGESETTING173OptionEnum[keyof typeof GPCAMERACHANGESETTING173OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING175OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type GPCAMERACHANGESETTING175OptionEnum = typeof GPCAMERACHANGESETTING175OptionEnum[keyof typeof GPCAMERACHANGESETTING175OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING176OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_20: 20,
    NUMBER_21: 21,
    NUMBER_22: 22,
    NUMBER_23: 23,
    NUMBER_24: 24,
    NUMBER_25: 25,
    NUMBER_26: 26,
    NUMBER_27: 27,
    NUMBER_100: 100,
    NUMBER_101: 101,
    NUMBER_102: 102,
    NUMBER_103: 103,
    NUMBER_104: 104,
    NUMBER_105: 105,
    NUMBER_106: 106,
    NUMBER_107: 107,
    NUMBER_108: 108,
    NUMBER_109: 109,
    NUMBER_110: 110,
    NUMBER_111: 111,
    NUMBER_112: 112,
    NUMBER_113: 113,
    NUMBER_114: 114,
    NUMBER_115: 115,
    NUMBER_116: 116,
    NUMBER_117: 117,
    NUMBER_118: 118,
    NUMBER_119: 119,
    NUMBER_120: 120,
    NUMBER_121: 121,
    NUMBER_122: 122,
    NUMBER_123: 123,
    NUMBER_124: 124,
    NUMBER_125: 125,
    NUMBER_126: 126,
    NUMBER_127: 127,
    NUMBER_128: 128,
    NUMBER_129: 129,
    NUMBER_130: 130,
    NUMBER_131: 131,
    NUMBER_132: 132,
    NUMBER_133: 133,
    NUMBER_134: 134,
    NUMBER_135: 135,
    NUMBER_136: 136,
    NUMBER_137: 137
} as const;
export type GPCAMERACHANGESETTING176OptionEnum = typeof GPCAMERACHANGESETTING176OptionEnum[keyof typeof GPCAMERACHANGESETTING176OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING177OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type GPCAMERACHANGESETTING177OptionEnum = typeof GPCAMERACHANGESETTING177OptionEnum[keyof typeof GPCAMERACHANGESETTING177OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING178OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type GPCAMERACHANGESETTING178OptionEnum = typeof GPCAMERACHANGESETTING178OptionEnum[keyof typeof GPCAMERACHANGESETTING178OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING179OptionEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GPCAMERACHANGESETTING179OptionEnum = typeof GPCAMERACHANGESETTING179OptionEnum[keyof typeof GPCAMERACHANGESETTING179OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING180OptionEnum = {
    NUMBER_0: 0,
    NUMBER_101: 101,
    NUMBER_102: 102
} as const;
export type GPCAMERACHANGESETTING180OptionEnum = typeof GPCAMERACHANGESETTING180OptionEnum[keyof typeof GPCAMERACHANGESETTING180OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING182OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type GPCAMERACHANGESETTING182OptionEnum = typeof GPCAMERACHANGESETTING182OptionEnum[keyof typeof GPCAMERACHANGESETTING182OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING183OptionEnum = {
    NUMBER_0: 0,
    NUMBER_2: 2
} as const;
export type GPCAMERACHANGESETTING183OptionEnum = typeof GPCAMERACHANGESETTING183OptionEnum[keyof typeof GPCAMERACHANGESETTING183OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING184OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type GPCAMERACHANGESETTING184OptionEnum = typeof GPCAMERACHANGESETTING184OptionEnum[keyof typeof GPCAMERACHANGESETTING184OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING186OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type GPCAMERACHANGESETTING186OptionEnum = typeof GPCAMERACHANGESETTING186OptionEnum[keyof typeof GPCAMERACHANGESETTING186OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING187OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;
export type GPCAMERACHANGESETTING187OptionEnum = typeof GPCAMERACHANGESETTING187OptionEnum[keyof typeof GPCAMERACHANGESETTING187OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING189OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type GPCAMERACHANGESETTING189OptionEnum = typeof GPCAMERACHANGESETTING189OptionEnum[keyof typeof GPCAMERACHANGESETTING189OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING190OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type GPCAMERACHANGESETTING190OptionEnum = typeof GPCAMERACHANGESETTING190OptionEnum[keyof typeof GPCAMERACHANGESETTING190OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING191OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type GPCAMERACHANGESETTING191OptionEnum = typeof GPCAMERACHANGESETTING191OptionEnum[keyof typeof GPCAMERACHANGESETTING191OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING192OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_3: 3
} as const;
export type GPCAMERACHANGESETTING192OptionEnum = typeof GPCAMERACHANGESETTING192OptionEnum[keyof typeof GPCAMERACHANGESETTING192OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING193OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type GPCAMERACHANGESETTING193OptionEnum = typeof GPCAMERACHANGESETTING193OptionEnum[keyof typeof GPCAMERACHANGESETTING193OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING2OptionEnum = {
    NUMBER_1: 1,
    NUMBER_4: 4,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_9: 9,
    NUMBER_18: 18,
    NUMBER_24: 24,
    NUMBER_25: 25,
    NUMBER_26: 26,
    NUMBER_27: 27,
    NUMBER_28: 28,
    NUMBER_100: 100,
    NUMBER_107: 107,
    NUMBER_108: 108,
    NUMBER_109: 109,
    NUMBER_110: 110,
    NUMBER_111: 111
} as const;
export type GPCAMERACHANGESETTING2OptionEnum = typeof GPCAMERACHANGESETTING2OptionEnum[keyof typeof GPCAMERACHANGESETTING2OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING3OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_13: 13
} as const;
export type GPCAMERACHANGESETTING3OptionEnum = typeof GPCAMERACHANGESETTING3OptionEnum[keyof typeof GPCAMERACHANGESETTING3OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING43OptionEnum = {
    NUMBER_0: 0,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type GPCAMERACHANGESETTING43OptionEnum = typeof GPCAMERACHANGESETTING43OptionEnum[keyof typeof GPCAMERACHANGESETTING43OptionEnum];
/**
 * @export
 */
export const GPCAMERACHANGESETTING59OptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_4: 4,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_11: 11,
    NUMBER_12: 12
} as const;
export type GPCAMERACHANGESETTING59OptionEnum = typeof GPCAMERACHANGESETTING59OptionEnum[keyof typeof GPCAMERACHANGESETTING59OptionEnum];
