/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GPCAMERAFIRMWAREUPDATEV2200Response,
  GPCAMERAFWUPDATEDOWNLOADFILE200Response,
} from '../models/index.js';
import {
    GPCAMERAFIRMWAREUPDATEV2200ResponseFromJSON,
    GPCAMERAFIRMWAREUPDATEV2200ResponseToJSON,
    GPCAMERAFWUPDATEDOWNLOADFILE200ResponseFromJSON,
    GPCAMERAFWUPDATEDOWNLOADFILE200ResponseToJSON,
} from '../models/index.js';

export interface GPCAMERAFIRMWAREUPDATEV2Request {
    request?: GPCAMERAFIRMWAREUPDATEV2RequestEnum;
    file?: Blob;
    offset?: number;
    sha1?: string;
}

export interface GPCAMERAFWUPDATEDOWNLOADFILERequest {
    directToSD?: number;
    file?: Blob;
    sha1?: string;
    update?: number;
}

/**
 * 
 */
export class OTAApi extends runtime.BaseAPI {

    /**
     * Perform Resumable OTA Update  To send a portion of the OTA image as per the requestBody specification, do not use the `request` parameter.   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - WIFI - USB 
     * Resumable OTA Update
     */
    async gPCAMERAFIRMWAREUPDATEV2Raw(requestParameters: GPCAMERAFIRMWAREUPDATEV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GPCAMERAFIRMWAREUPDATEV2200Response>> {
        const queryParameters: any = {};

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.offset !== undefined) {
            formParams.append('offset', requestParameters.offset as any);
        }

        if (requestParameters.sha1 !== undefined) {
            formParams.append('sha1', requestParameters.sha1 as any);
        }

        const response = await this.request({
            path: `/gp/gpSoftUpdate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GPCAMERAFIRMWAREUPDATEV2200ResponseFromJSON(jsonValue));
    }

    /**
     * Perform Resumable OTA Update  To send a portion of the OTA image as per the requestBody specification, do not use the `request` parameter.   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - WIFI - USB 
     * Resumable OTA Update
     */
    async gPCAMERAFIRMWAREUPDATEV2(requestParameters: GPCAMERAFIRMWAREUPDATEV2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GPCAMERAFIRMWAREUPDATEV2200Response> {
        const response = await this.gPCAMERAFIRMWAREUPDATEV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black    ---  Supported Protocols:   - WIFI - USB 
     * Simple OTA Update
     */
    async gPCAMERAFWUPDATEDOWNLOADFILERaw(requestParameters: GPCAMERAFWUPDATEDOWNLOADFILERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GPCAMERAFWUPDATEDOWNLOADFILE200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.directToSD !== undefined) {
            formParams.append('DirectToSD', requestParameters.directToSD as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.sha1 !== undefined) {
            formParams.append('sha1', requestParameters.sha1 as any);
        }

        if (requestParameters.update !== undefined) {
            formParams.append('update', requestParameters.update as any);
        }

        const response = await this.request({
            path: `/gp/gpUpdate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GPCAMERAFWUPDATEDOWNLOADFILE200ResponseFromJSON(jsonValue));
    }

    /**
     *   ---  Supported Cameras:   - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black    ---  Supported Protocols:   - WIFI - USB 
     * Simple OTA Update
     */
    async gPCAMERAFWUPDATEDOWNLOADFILE(requestParameters: GPCAMERAFWUPDATEDOWNLOADFILERequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GPCAMERAFWUPDATEDOWNLOADFILE200Response> {
        const response = await this.gPCAMERAFWUPDATEDOWNLOADFILERaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GPCAMERAFIRMWAREUPDATEV2RequestEnum = {
    Delete: 'delete',
    Showui: 'showui',
    Start: 'start',
    Progress: 'progress',
    Cancelled: 'cancelled'
} as const;
export type GPCAMERAFIRMWAREUPDATEV2RequestEnum = typeof GPCAMERAFIRMWAREUPDATEV2RequestEnum[keyof typeof GPCAMERAFIRMWAREUPDATEV2RequestEnum];
