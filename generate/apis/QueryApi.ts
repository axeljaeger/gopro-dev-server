/* tslint:disable */
/* eslint-disable */
/**
 * OpenGoPro HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GPCAMERAOPENGOPROVERSION200Response,
  OGPCAMERAINFO200Response,
  OGPGETDATETIME200Response,
  OGPGETLASTMEDIA200Response,
  State,
} from '../models/index.js';
import {
    GPCAMERAOPENGOPROVERSION200ResponseFromJSON,
    GPCAMERAOPENGOPROVERSION200ResponseToJSON,
    OGPCAMERAINFO200ResponseFromJSON,
    OGPCAMERAINFO200ResponseToJSON,
    OGPGETDATETIME200ResponseFromJSON,
    OGPGETDATETIME200ResponseToJSON,
    OGPGETLASTMEDIA200ResponseFromJSON,
    OGPGETLASTMEDIA200ResponseToJSON,
    StateFromJSON,
    StateToJSON,
} from '../models/index.js';

/**
 * 
 */
export class QueryApi extends runtime.BaseAPI {

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - WIFI - USB 
     * Get Open GoPro Version
     */
    async gPCAMERAOPENGOPROVERSIONRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GPCAMERAOPENGOPROVERSION200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GPCAMERAOPENGOPROVERSION200ResponseFromJSON(jsonValue));
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - WIFI - USB 
     * Get Open GoPro Version
     */
    async gPCAMERAOPENGOPROVERSION(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GPCAMERAOPENGOPROVERSION200Response> {
        const response = await this.gPCAMERAOPENGOPROVERSIONRaw(initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Hardware Info
     */
    async oGPCAMERAINFORaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OGPCAMERAINFO200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OGPCAMERAINFO200ResponseFromJSON(jsonValue));
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Hardware Info
     */
    async oGPCAMERAINFO(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OGPCAMERAINFO200Response> {
        const response = await this.oGPCAMERAINFORaw(initOverrides);
        return await response.value();
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Date / Time
     */
    async oGPGETDATETIMERaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OGPGETDATETIME200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/get_date_time`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OGPGETDATETIME200ResponseFromJSON(jsonValue));
    }

    /**
     *   ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black  - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Date / Time
     */
    async oGPGETDATETIME(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OGPGETDATETIME200Response> {
        const response = await this.oGPGETDATETIMERaw(initOverrides);
        return await response.value();
    }

    /**
     * This will return the complete path of the last captured media. Depending on the type of media captured, it will return:  - single photo / video: The single media path - any grouped media: The path to the first captured media in the group   ---  Supported Cameras:   - HERO12 Black   ---  Supported Protocols:   - WIFI  - USB 
     * Get Last Captured Media
     */
    async oGPGETLASTMEDIARaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OGPGETLASTMEDIA200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/media/last_captured`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OGPGETLASTMEDIA200ResponseFromJSON(jsonValue));
    }

    /**
     * This will return the complete path of the last captured media. Depending on the type of media captured, it will return:  - single photo / video: The single media path - any grouped media: The path to the first captured media in the group   ---  Supported Cameras:   - HERO12 Black   ---  Supported Protocols:   - WIFI  - USB 
     * Get Last Captured Media
     */
    async oGPGETLASTMEDIA(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OGPGETLASTMEDIA200Response> {
        const response = await this.oGPGETLASTMEDIARaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all camera settings and statuses.  ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Camera State
     */
    async oGPGETSTATERaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gopro/camera/state`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * Get all camera settings and statuses.  ---  Supported Cameras:   - HERO12 Black - HERO11 Black Mini - HERO11 Black - HERO10 Black - HERO9 Black   ---  Supported Protocols:   - USB - WIFI 
     * Get Camera State
     */
    async oGPGETSTATE(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.oGPGETSTATERaw(initOverrides);
        return await response.value();
    }

}
